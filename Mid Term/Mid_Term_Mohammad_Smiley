import json
import requests
from bs4 import BeautifulSoup

opened_tabs = [
        {
            "title" : "Quotes To Scrape",
            "URL" : "https://quotes.toscrape.com/"
        },
        {
            "title" : "SE Factory",
            "URL" : "https://www.sefactory.io/",
            "children" : [
                {
                    "title" : "FSW SE Factory",
                    "URL" : "https://www.sefactory.io/fsw"
                },
                {
                    "title" :"FSD SE Factory",
                    "URL" : "https://www.sefactory.io/fsd"
                },
                {
                    "title" :"UIX SE Factory",
                    "URL" : "https://www.sefactory.io/uix"
                }
            ]
        },
        {
            "title" : "Github Repo",
            "URL" : "https://github.com/MOE-X/Foundations-cs-python"
        },
        {
            "title" : "YouTube-JSON Tutorial",
            "URL" : "https://www.youtube.com/watch?v=9N6a-VLBa2I&list=WL&index=1"
        }
]



##################### Choice Nb 1 #####################
def openNewtab(title, url):
    # Opens a new tab by taking tab info from the user
    new_tab = {
                "title": title,
                "URL": url
            }
    opened_tabs.append(new_tab)
    return(opened_tabs)
#######################################################
title = input("Enter The tab's title: ")
url = input("Enter The URL of the page you want to open: ")
print(openNewtab(title, url))













#################### Choice Nb 2 #####################
def closeTabByIndex(tab_index,opened_tabs):
    # Closes a specific tab based on the index that the user gives
    if tab_index:
        # Checks if the user inputed or not
        if tab_index.isdigit():
            # Checks if the user entered a number
            if len(opened_tabs[int(tab_index)]) == 2:
                # Checks if the tab that the user wants to close is a normal tab
                del opened_tabs[int(tab_index)]
                print("Deleted tab --> ", opened_tabs[int(tab_index)])
                return opened_tabs
            elif len(opened_tabs[int(tab_index)]) > 2:
                # Checks if the tab that the user wants to close is a nested tab
                print("""The tab you chose have nested tabs, please choose what you want to do:\n
1. Delete the whole tab(akong with the nested tabs).
2. Delete a nested tab by index.\n""")
                choice = int(input("Your choice is: "))
                if choice == 1:
                    del opened_tabs[int(tab_index)]
                    print("Deleted tab --> ", opened_tabs[int(tab_index)])
                    return opened_tabs
                elif choice == 2:
                    nested_choice = input("Enter the index of the nested tab to delete it: ")
                    if nested_choice.isdigit() and len(opened_tabs[int(tab_index)]["children"][int(nested_choice)]):
                        del opened_tabs[int(tab_index)]["children"][int(nested_choice)]
                        print("Deleted nested tab --> ", opened_tabs[int(tab_index)]["children"][int(nested_choice)])
                        return opened_tabs
                    else:
                        print("Invalid Input!")
        else:
            print("Please enter a valid number: ", end="")
            tab_index = input("")
            del opened_tabs[int(tab_index)]
            print("Deleted tab --> ", opened_tabs[int(tab_index)])
            return opened_tabs
    elif not tab_index:
        del opened_tabs[-1]
        print("No index was given, deleting last opened tab...")
        print("Deleted last tab -->", opened_tabs[-1])
        return opened_tabs
        
######################################################
tab_index = input("Enter the index of the tab to delete it: ")
print(closeTabByIndex(tab_index, opened_tabs))













#################### Choice Nb 3 #####################
def displayTabContentByIndex(tab_index,opened_tabs):
    # Displays the html content of a specific tab based on the index given by the user
    if tab_index:
        if tab_index.isdigit():
            url_to_scrape = opened_tabs[int(tab_index)]["URL"]              #still needs some logic!!!
            page_to_scrape = requests.get(url_to_scrape)
            if page_to_scrape.status_code == 200 :
                soup = BeautifulSoup(page_to_scrape.text, 'html.parser')
                print(soup.findAll)
            else:
                print('Error while accessing this URL... Please try again later!\nStatus code --> ',page_to_scrape.status_code)
        
######################################################
tab_index = input("Enter the index of the tab to display its html content :")
displayTabContentByIndex(tab_index, opened_tabs)














#################### Choice Nb 4 #####################
def displayAllTabs(opened_tabs):
    for tab in opened_tabs:
        print("> ",tab["title"])
        if len(tab) > 2:
            for nested_tab in tab["children"]:
                print("\t-> ", nested_tab["title"])
######################################################
print("Displaying all tabs and their children...")
print("-"*45)
displayAllTabs(opened_tabs)













##################### Choice Nb 5 #####################
def openNestedTab(index_of_parent, title, url):
    new_nested_tab = {
                        "title" : title,
                        "URL" : url
                }
    for parent in opened_tabs[0]["Tabs"]:
        if len(parent) > 2:
            parent["children"].append(new_nested_tab)
    print(opened_tabs)

#######################################################

index_of_parent = int(input("Enter the index of the parent tab: "))
title = input("Enter the title of the website: ")
url = input("Enter the URL of the website: ")
print("Opening a nested tab within the selected parent tab...")
print("-"*40)
openNestedTab(index_of_parent, title, url)